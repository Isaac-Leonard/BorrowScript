program := {import} {funcDeclaration} funcDeclaration
import := "import" ("* as " identifier | "{" {identifier "," } identifier "}" ) from STRING
variableAssignment := identifier "=" expression;
variableInitialiser := mutibilityModifier " " identifier (":" identifier )? "=" expression;
expression := symbol | prefixOperator expression | "(" expression")" | expression binaryOperator expression | funcCall | funcDeclaration | "await" expression;
funcDeclaration := "async"? "(" ({variableInitialiser "," } variableInitialiser )?  ")" "=>" expression;
funcCall := identifier whitespace? "(" whitespace? ({ whitespace? expression whitespace? "," } whitespace? expression whitespace?)? ")"
mutibilityModifier := "let" | "const";
symbol := STRING | integer | decimal | identifier | boolean;
decimal := integer "." digit {digit}
integer := digit {digit};
identifier :=( lowercaseLetter | uppercaseLetter) {alphanumeric};
boolean := "true" | "false"
binaryOperator = "+" | "-" | "*" | "/";
prefixOperator := "!" | "-";
alphanumeric := digit|lowercaseLetter|uppercaseLetter;
lowercaseLetter := [a-z];
uppercaseLetter := [A-Z]
digit:=[0-9]
whitespace := " " | {whitespace } " " | COMMENTSTRING | "\n"
end := ";"
